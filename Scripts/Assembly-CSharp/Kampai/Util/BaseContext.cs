using System;
using Ea.Sharkbite.HttpPlugin.Http.Api;
using Ea.Sharkbite.HttpPlugin.Http.Impl;
using Kampai.Common;
using Kampai.Common.Service.HealthMetrics;
using Kampai.Game;
using Kampai.Game.Mignette;
using Kampai.Game.View;
using Kampai.Main;
using Kampai.Main.View;
using Kampai.Splash;
using Kampai.UI.Controller;
using Kampai.UI.View;
using Kampai.Util.Logging.Hosted;
using UnityEngine;
using strange.extensions.command.api;
using strange.extensions.command.impl;
using strange.extensions.context.api;
using strange.extensions.context.impl;

namespace Kampai.Util
{
	public abstract class BaseContext : MVCSContext
	{
		public BaseContext()
		{
		}

		public BaseContext(MonoBehaviour view, bool autoStartup)
			: base(view, autoStartup)
		{
			if (Context.firstContext == this)
			{
				Debug.Log(string.Format("Persistent path is {0}", GameConstants.PERSISTENT_DATA_PATH));
			}
		}

		protected override void addCoreComponents()
		{
			base.addCoreComponents();
			injectionBinder.Unbind<ICommandBinder>();
			injectionBinder.Bind<ICommandBinder>().To<SignalCommandBinder>().ToSingleton();
		}

		public override void Launch()
		{
			base.Launch();
			if (Context.firstContext == this)
			{
				injectionBinder.GetInstance<StartAndroidBackButtonSignal>().Dispatch();
			}
			injectionBinder.GetInstance<StartSignal>().Dispatch();
		}

		protected abstract void MapBindings();

		protected override void mapBindings()
		{
			base.mapBindings();
			if (Context.firstContext == this)
			{
				GameObject o = new GameObject("Managers");
				injectionBinder.Bind<GameObject>().ToValue(o).ToName(MainElement.MANAGER_PARENT)
					.CrossContext();
				injectionBinder.Bind<ICrossContextCapable>().ToValue(this).ToName(BaseElement.CONTEXT)
					.CrossContext();
				injectionBinder.Bind<FastCommandPool>().ToSingleton().CrossContext();
				injectionBinder.Bind<IRoutineRunner>().To<RoutineRunner>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IUpdateRunner>().To<UpdateRunner>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<FPSUtil>().ToSingleton().CrossContext();
				injectionBinder.Bind<IInvokerService>().To<InvokerService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<ICoroutineProgressMonitor>().To<CoroutineProgressMonitor>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<DeviceInformation>().ToSingleton().CrossContext();
				injectionBinder.Bind<GameLoadedModel>().ToSingleton().CrossContext();
				injectionBinder.Bind<ILogglyDtoCache>().To<LogglyDtoCache>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<ILocalizationService>().To<HALService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<ILocalizationService>().To<HALService>().ToName(LocalizationServices.EVENT)
					.CrossContext()
					.ToSingleton();
				injectionBinder.Bind<IAssetBundlesService>().To<AssetBundlesService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<ILocalContentService>().To<LocalContentService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IAssetsPreloadService>().To<AssetsPreloadService>().CrossContext()
					.ToSingleton();
				injectionBinder.Bind<IClientVersion>().To<ClientVersion>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<string>().ToValue(GameConstants.Server.SERVER_URL).ToName("game.server.host")
					.CrossContext();
				injectionBinder.Bind<string>().ToValue(GameConstants.Server.SERVER_ENVIRONMENT).ToName("game.server.environment")
					.CrossContext();
				injectionBinder.Bind<string>().ToValue(GameConstants.Server.CDN_METADATA_URL).ToName("cdn.server.host")
					.CrossContext();
				injectionBinder.Bind<IDefinitionService>().To<DefinitionService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IPartyService>().To<PartyService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IGuestOfHonorService>().To<GuestOfHonorService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<AppResumeSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<AppPauseSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<AppQuitSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<AppFocusGainedSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<AppEarlyPauseSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<IBuildingUtilities>().To<BuildingUtilities>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<OrderBoardTransactionFailedSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<LoadRushDialogSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<LoadCurrencyWarningSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<OpenStorageBuildingSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<OpenVillainLairPortalBuildingSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<OpenVillainLairResourcePlotBuildingSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ClickedVillainLairComponentBuildingSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ClickedVillainLairGhostedComponentBuildingSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<UnlockVillainLairSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<LoadVillainLairAssetsSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<VillainLairAssetsLoadedSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<LoadVillainLairInstancesSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<EnterVillainLairSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ExitVillainLairSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<OpenMinionUpgradeBuildingSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ShowSocialPartyStartSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ShowSocialPartyRewardSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ShowSocialPartyInviteAlertSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ShowSocialPartyFillOrderSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ShowSocialPartyFBConnectSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<OpenStageBuildingSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<UIModel>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<DestructibleHighlightSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<SetupPushNotificationsSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<CoppaCompletedSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ReloadGameSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<DisplayNotificationReminderSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ResetLairWayfinderIconSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<VillainLairModel>().ToSingleton().CrossContext();
				injectionBinder.Bind<UpdateVillainLairMenuViewSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<CreateMasterPlanComponentSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<MasterPlanSelectComponentSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<MasterPlanTaskCompleteSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<LogToScreenSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<MinionPickSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<MinionReactInRadiusSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<TikiBarViewPickSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<UnlockMinionsSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<DisplayLevelUpRewardSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<DisplayPlayerTrainingSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<DisplayRedemptionConfirmationSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<UpdateLeisureMenuViewSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<SendMinionToLeisureSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<SendMinionToLairResourcePlotSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<EnvironmentalMignetteTappedSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<DeselectPickSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<BuildingPickSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<LairEnvironmentElementClickedSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<MagnetFingerPickSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<DoubleClickPickSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<DragAndDropPickSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<LandExpansionPickSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<LoadServerSalesSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<OpenUpSellModalSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ReconcileSalesSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<EndSaleSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<UpdateSaleBadgeSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<UpdatePurchasedSalesSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<DefinitionsHotSwapCompleteSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<DefinitionsChangedSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<FinishCallMinionSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<CallMinionSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<RushTaskSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<StartMinionTaskSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<RushOneMinionInBuildingSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<BuildingChangeStateSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<SendBuildingToInventorySignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<BuildingCooldownCompleteSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<BuildingCooldownUpdateViewSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<UpdateQueueIcon>().ToSingleton().CrossContext();
				injectionBinder.Bind<ShowMTXStoreSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<MinionStateChangeSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<RepairBridgeSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<SaveDevicePrefsSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<UpdateVolumeSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ICoppaService>().To<CoppaService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IRequestFactory>().To<NimbleRequestFactory>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<ITelemetryService>().To<TelemetryService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<ITimeService>().To<TimeService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<NimbleTelemetrySender>().ToSingleton().CrossContext();
				injectionBinder.Bind<IDownloadService>().To<DownloadService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IBackgroundDownloadDlcService>().To<BackgroundDownloadDlcService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<TemporaryMinionsService>().ToSingleton().CrossContext();
				injectionBinder.Bind<LevelUpBackButtonSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<DisplayDiscoGlobeSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<KillDiscoGlobeSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<AwardLevelSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ReconcileLevelUnlocksSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<EnableBuildingIndicatorSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<UpdateBuildingIndicatorSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<SetLevelSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<SetXPSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<SetGrindCurrencySignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<SetPremiumCurrencySignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<SetStorageCapacitySignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<SetHUDTokenAmountSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<SelectBuildingSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<DeselectBuildingSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ZoomPercentageSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<RequestZoomPercentageSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<SpawnDooberSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<SpawnMignetteDooberSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<MignetteDooberSpawnedSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ChangeMignetteScoreSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<PostTransactionSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<MoveMinionFinishedSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<BuildingHarvestSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ShowBridgeUISignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<RefreshQueueSlotSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<CraftingCompleteSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<RemoveCraftingQueueSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<OrderBoardFillOrderSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<OrderBoardDeleteOrderSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<DisplayRandomDropIconSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<CameraAutoMoveToBuildingSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<PanAndOpenModalSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<PanAndOpenQuestSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<InsufficientInputsSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ConfigurationsLoadedSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<MainCompleteSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<MoveBuildMenuSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ShowHUDSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<TokenDooberHasBeenSpawnedSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<TokenDooberCompleteSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ShowStoreSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<StopAutopanSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<CancelAutozoomSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<RefreshSaleItemsSuccessSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<RushRefreshTimerSuccessSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<HaltSlotMachine>().ToSingleton().CrossContext();
				injectionBinder.Bind<MarketplaceUpdateSoldItemsSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<UpdateMarketplaceSaleOrderSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<UpdateMarketplaceSlotStateSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<GenerateBuyItemsSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<StartLeisurePartyPointsFinishedSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<GetBuffStateSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<OpenStoreHighlightItemSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<QuestStepRushSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<QuestDetailIDSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<DeliverTaskItemSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<CancelTSMQuestTaskSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<StartQuestTaskSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<CollectTSMQuestTaskRewardSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<QuestTimeoutSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<UpdateQuestBookBadgeSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<UpdateQuestPanelSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<TimedQuestNotificationSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ShowQuestRewardSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<HarvestReadySignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<AwardLairBonusDropsThenSetHarvestReadySignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<OrderBoardStartRefillTicketSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<OrderBoardRefillTicketSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<OrderBoardFillOrderCompleteSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<GenerateTemporaryMinionSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ShowBuildingDetailMenuSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ShowCraftingBuildingMenuSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ShowQuestPanelSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ShowProceduralQuestPanelSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<UpdateProceduralQuestPanelSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<TryHarvestBuildingSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<RepairBuildingSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<RepairLairResourcePlotSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ParentLairResourcePlotSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<CameraMoveToCustomLairPlotSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<CameraMoveToCustomPositionSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<RecreateBuildingSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<UITryHarvestSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<HighlightHarvestButtonSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<SetFTUETextSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<MinionTaskCompleteSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<PurchaseLandExpansionSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<BurnLandExpansionSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<RequestStopMignetteSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<StopMignetteSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<StartMignetteSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ShowAndIncreaseMignetteScoreSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<MignetteEndedSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<DestroyMignetteContextSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ShowNeedXMinionsSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<MignetteScoreUpdatedSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<StartMignetteHUDCountdownSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<MignetteNotificationSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<CreditCollectionRewardSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<CompositeBuildingPieceAddedSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ShuffleCompositeBuildingPiecesSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ShowTipsSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<PopupMessageSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<PopupMessageWithComponentBuildingSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<PopupMessageAtLocationSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<HideSkrimSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<EnableSkrimButtonSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<OnClickSkrimSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<MoveSkrimTopLayerSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<HideCharactersSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<IRandomService>().ToValue(new RandomService(DateTime.Now.Ticks)).CrossContext();
				injectionBinder.Bind<StoreButtonClickSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<MoveBuildingSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<RotateBuildingSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ScheduleCooldownSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<UpdateMovementValidity>().ToSingleton().CrossContext();
				injectionBinder.Bind<OpenBuildingMenuSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<SelectMinionSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<DeselectMinionSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<DeselectAllMinionsSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<DeselectTaskedMinionsSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<IQuestScriptService>().To<QuestScriptService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IQuestService>().To<QuestService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IMasterPlanQuestService>().To<MasterPlanQuestService>().ToSingleton()
					.CrossContext()
					.Weak();
				injectionBinder.Bind<QuestScriptKernel>().ToSingleton().CrossContext();
				injectionBinder.Bind<QuestScriptController>().CrossContext();
				injectionBinder.Bind<IQuestScriptRunner>().To<LuaScriptRunner>().ToName(QuestRunnerLanguage.Lua)
					.CrossContext();
				injectionBinder.Bind<LuaKernel>().ToSingleton().CrossContext();
				injectionBinder.Bind<IOrderBoardService>().To<OrderBoardService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IPrestigeService>().To<PrestigeService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<ITriggerService>().To<TriggerService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IUpsellService>().To<UpsellService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IGoToService>().To<GoToService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IZoomCameraModel>().To<ZoomCameraModel>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IMinionBuilder>().To<MinionBuilder>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IDummyCharacterBuilder>().To<DummyCharacterBuilder>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IPartyFavorAnimationService>().To<PartyFavorAnimationService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<INamedCharacterBuilder>().To<NamedCharacterBuilder>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IVideoService>().To<VideoService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<ILocalPersistanceService>().To<LocalPersistanceService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IEncryptionService>().To<EncryptionService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<MignetteCollectionService>().ToSingleton().CrossContext();
				injectionBinder.Bind<IManifestService>().To<ManifestService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<DLCModel>().ToSingleton().CrossContext();
				injectionBinder.Bind<IDLCService>().To<DLCService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<IClientHealthService>().To<ClientHealthService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<ITapEventMetricsService>().To<TapEventMetricsService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<LogClientMetricsSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<LogTapEventMetricsSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<IAchievementService>().To<AchievementService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<ITimedSocialEventService>().To<TimedSocialEventService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<SocialTeam>().ToSingleton().CrossContext();
				injectionBinder.Bind<MinimizeAppSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<CheckAvailableStorageSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<NetworkModel>().ToSingleton().CrossContext();
				injectionBinder.Bind<NetworkConnectionLostSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ResumeNetworkOperationSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ShowOfflinePopupSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<NetworkTypeChangedSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<SetupCanvasSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<NetworkLostOpenSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<NetworkLostCloseSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<UIAddedSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<UIRemovedSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ToggleHitboxSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<CameraModel>().ToSingleton().CrossContext();
				injectionBinder.Bind<StageService>().ToSingleton().CrossContext();
				injectionBinder.Bind<FadeBackgroundAudioSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<ILoadInService>().To<LoadInService>().ToSingleton()
					.CrossContext();
				injectionBinder.Bind<LocalizationServiceInitializedSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<SplashProgressUpdateSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<SetSplashProgressSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<ShowActivitySpinnerSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<FTUELevelChangedSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<DisplayMinionLevelTokenSignal>().ToSingleton().CrossContext()
					.Weak();
				injectionBinder.Bind<EnvironmentState>().ToSingleton().CrossContext();
				injectionBinder.Bind<ReInitializeGameSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<LoginUserSignal>().ToSingleton().CrossContext();
				injectionBinder.Bind<AndroidBackButtonSignal>().ToSingleton().CrossContext();
				base.commandBinder.Bind<StartAndroidBackButtonSignal>().To<StartAndroidBackButtonCommand>();
				base.commandBinder.Bind<AndroidBackButtonSignal>().To<AndroidBackButtonCommand>();
				injectionBinder.Bind<MediaStateChangedSignal>().ToSingleton().CrossContext();
				base.commandBinder.Bind<BuildingZoomSignal>().To<BuildingZoomCommand>();
				base.commandBinder.Bind<MinimizeAppSignal>().To<MinimizeAppCommand>();
				base.commandBinder.Bind<CheckAvailableStorageSignal>().To<CheckAvailableStorageCommand>();
				base.commandBinder.Bind<NetworkConnectionLostSignal>().To<NetworkConnectionLostCommand>();
				base.commandBinder.Bind<ResumeNetworkOperationSignal>().To<ResumeNetworkOperationCommand>();
				base.commandBinder.Bind<ShowOfflinePopupSignal>().To<ShowOfflinePopupCommand>();
				base.commandBinder.Bind<SetupCanvasSignal>().To<SetupCanvasCommand>();
				base.commandBinder.Bind<UIAddedSignal>().To<UIAddedCommand>();
				base.commandBinder.Bind<UIRemovedSignal>().To<UIRemovedCommand>();
				base.commandBinder.Bind<ReInitializeGameSignal>().To<ReInitializeGameCommand>();
				base.commandBinder.Bind<ShowActivitySpinnerSignal>().To<ShowActivitySpinnerCommand>();
				base.commandBinder.Bind<DownloadDLCPartSignal>().To<DownloadDLCPartCommand>();
				base.mediationBinder.Bind<AppTrackerView>().To<AppTrackerMediator>();
				base.mediationBinder.Bind<OfflineView>().To<OfflineMediator>();
			}
			MapBindings();
		}

		protected virtual void PostBindings()
		{
		}

		protected override void postBindings()
		{
			PostBindings();
			base.postBindings();
		}
	}
}
